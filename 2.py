#Python — популярный язык программирования.
#Python — объектно-ориентированный язык программирования.
#Python можно использовать на сервере для создания веб-приложений.
#Он был создан Гвидо ван Россумом, и выпущен в 1991 году.
#Применяется для:

#веб-разработка (серверная часть),
#разработка программного обеспечения,
#математика
#системные скрипты.

#Git — мощная и сложная распределенная система контроля версий:
"""
Понимание всех возможностей Git открывает для разработчика новые горизонты в управлении исходным кодом. 
Репозиторий Git — это хранилище, в котором расположен ваш проект и его история.
Ветка — это параллельная версия репозитория.

"""

#Переменные — это контейнеры для хранения значений данных.
#Вы можете получить тип данных переменной с помощью функции.type()
#Python позволяет извлекать значения в переменные. Это называется распаковкой.
#Переменные, созданные вне функции известны как глобальные переменные.
#В Python существует три числовых типа:
int
float
complex
#integer, — это целое число.
#float - Число с плавающей запятой — это число,

#Kоторый можно использовать для создания случайных чисел:random()
import random 
print(random.randrange(1, 9))

#Строки в python заключаются либо в одинарные, либо в двойные кавычки.
#Поскольку строки являются массивами, мы можем перебирать символы в строке с помощью цикла.for
for x in "banana":
    print(x)
    
#Чтобы получить длину строки, воспользуйтесь функцией.len()
#Вы можете вернуть диапазон символов с помощью синтаксиса slice.
s = " High Grade "
print(s[2:5])

#Метод возвращает строку в верхнем регистре:upper()
print(s.upper())
#Метод удаляет все пробелы в начале или в конце:strip()
print(s.strip())
#Метод заменяет строку на другую строку:replace()
print(s.replace("h", "hh"))
#Escape-символ — это обратная косая черта, за которой следует символ, который вы хотите вставить.\
#Метод возвращает строку где первый символ — прописные, а остальные — строчные.capitalize()
#Метод возвращает количество Указанное значение появляется в строке.count()
#Метод возвращает значение True, если метод строка заканчивается указанным значением, в противном случае False.endswith()

#Логические значения представляют одно из двух значений:True False
#можно использовать для определения того, относится ли объект к определенному типу данных:isinstance()

#List - Списки используются для хранения нескольких элементов в одной переменной.
x = ["Zharas", "Asan", "Dias"]
if "Asan" in x:
 print(x)

#Метод вставляет элемент по указанному индексу:insert()
#Чтобы добавить элемент в конец списка, используйте метод append():
x.append("Eldos")
#Чтобы вставить элемент списка по указанному индексу, используйте метод: insert()
#4тобы добавить элементы из другого списка к текущему списку, используйте метод.extend()
x.extend()
#Метод удаляет указанный элемент.remove():
x.remove("Zharas")
#Метод удаляет указанные индекс.pop(): Если индекс не указан, метод удаляет последний элемент.
x.pop(1)
#Ключевое слово также может полностью удалить список: del x
#Метод очищает список.clear()
#сортирует список по возрастанию, по умолчанию:Sort()
x.sort(reverse = True)
#Метод изменяет текущий порядок сортировки элементов.reverse()
#Для копирования списка можно использовать встроенный метод List.copy()

#Кортежи используются для хранения нескольких элементов в одной переменной.
a = ("Asan", "Men", "agai")
print(a)
#Преобразуйте кортеж в список, чтобы иметь возможность его изменить:
y = list(a)
y[1] = "Zharas"
a = tuple(y)
print(a)
#Set — это коллекция, которая не упорядочена, не может быть изменена* и не проиндексирована.
s = {"Set", "oneset", "kz"}
#Дубликаты не допускаются.
#Доступ к элементам в наборе невозможен, если обратиться к индексу или ключу.
#присутствует ли указанное значение в наборе, используя ключевое слово.for in
#Чтобы добавить один элемент в набор, используйте метод.add()
s.add("ylle")
#Чтобы добавить элементы из другого набора в текущий набор, используйте метод.update()
s.update("")
#Чтобы удалить элемент из набора, используйте метод: remove() discard()
#Методы and объединяют все элементы из обоих наборов: union() update()
#Метод сохраняет ТОЛЬКО дубликаты: intersection()

#Словари используются для хранения значений данных в парах ключ: значение.
#Словарь – это коллекция, которая упорядочена*, изменяема и не является Разрешить дубликаты.
i = {
    "Brand" : "Nike",
    "Color" : "Red",
    "Car" : "toyota"
}
print(i)
#Вы можете получить доступ к элементам словаря, обратившись к его ключевому имени внутри Квадратные скобки:


#С помощью цикла while мы можем выполнять набор операторов, если условие истинно.
#С помощью оператора break мы можем остановить цикл, даже если оператор while условие истинно:
#С помощью оператора continue мы можем остановить оператор и продолжите со следующей:
i = 1
while i < 6:
    print(i)
    if i == 3:
        break
    i += 1
#Цикл for используется для перебора последовательности:
#Функция range() возвращает последовательность чисел,
e = ["zhake", "zhaken", "koken"]
for x in e:
    if x == "zhake":
        continue
    print(x)

#Функция — это блок кода, который выполняется только при вызове.
#Параметр — это переменная, указанная в скобках в определении функции.
#Аргумент — это значение, которое передается функции при ее вызове.
#В Python функция определяется с помощью ключевого слова def:
def func():
    print("Hello it is func")
func()

#Лямбда-функция — это небольшая анонимная функция.
n = lambda a : a + 10
print(n(5))
n =lambda a, b ,c : a + b + c
print(n(5, 8 ,2))

#Массив — это специальная переменная, которая может содержать более одного значения одновременно.
x = ["toyota", "mers", "bmw"]
print(x)
#Почти все в Python является объектом, со своими свойствами и методами.
#Чтобы создать класс, используйте ключевое слово: class
#используем функцию __init__() для присвоения значений.
#Функция контролирует, что должно быть возвращено, когда объект класса представлен в виде строки.__str__()
class Myclass:
    def __init__(self, name, age):
        self.name = name
        self.age = age
p1 = Myclass("Zharas", 18)
print(p1.name, p1.age)

#Наследование позволяет нам определить класс, который наследует все методы и свойства от другого класса.
#Родительский класс — это класс, от которого наследуется, также называемый Базовый класс.
#Дочерний класс — это класс, который наследует от другого класса, также называется производным классом.
#которая заставит дочерний класс наследовать все методы и свойства от своего родитель:super()

class Person:
    def __init__(self,name,age):
        self.name = name
        self.age = age
p = Person("Zharas", "18")
print(p.name, p.age)

class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age
    def printname(self):
        print(self.name, self.age)
x = Person("Zharas", 18)
x.printname()